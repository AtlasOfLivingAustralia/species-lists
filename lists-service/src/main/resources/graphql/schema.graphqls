
type Query {
  lists(searchQuery:String, filters:[Filter], page:Int = 0, size: Int = 10, userId:String, isPrivate: Boolean = false): SpeciesListPage
  listsFacets(searchQuery:String): [Facet]
  listReleases(speciesListID: String, page:Int = 0, size: Int = 10): [Release]
  getSpeciesListMetadata(speciesListID: String!): SpeciesList
  getSpeciesList(speciesListID: String, page:Int = 0, size: Int = 10): SpeciesListItemPage
  filterSpeciesList(speciesListID: String!, searchQuery: String, filters:[Filter],
    page:Int = 0, size: Int = 10, sort: String = "scientificName", dir: String = "asc"): SpeciesListItemPage
  facetSpeciesList(speciesListID: String!, searchQuery:String, filters:[Filter], facetFields:[String], page:Int = 0, size: Int = 10): [Facet]
  facetSpeciesLists(searchQuery:String, filters:[Filter], facetFields:[String], page:Int = 0, size: Int = 10, userId:String, isPrivate: Boolean = false): [Facet]
  getTaxonImage(taxonID:String): Image
  getTaxonImages(taxonID:String,  page:Int = 0, size: Int = 10): [Image]
}

type Mutation {
  updateMetadata(id: String!, title: String!, description: String,
    licence: String!, listType: String!, authority:String, region:String,
    isAuthoritative:Boolean, isPrivate: Boolean, isInvasive: Boolean, isThreatened: Boolean,
    isBIE: Boolean, isSDS: Boolean, doi:String, wkt:String, tags:[String]): SpeciesList

  addField(id: String!, fieldName:String!, fieldValue:String): SpeciesList

  removeField(id: String!, fieldName:String!): SpeciesList

  renameField(id: String!, oldName:String!, newName:String!): SpeciesList

  updateSpeciesListItem(inputSpeciesListItem: InputSpeciesListItem): SpeciesListItem

  addSpeciesListItem(inputSpeciesListItem: InputSpeciesListItem): SpeciesListItem

  removeSpeciesListItem(id: String!): SpeciesListItem
}

type Image {
  url: String
}

type Release {
  id: ID
  releasedVersion: String!
  speciesListID: String!
  storedLocation: String
  metadata: SpeciesList
  createdDate: String
}

type SpeciesList {
  id: ID
  version: Int
  title: String
  description: String
  rowCount: Int
  fieldList:[String]
  facetList:[String]
  licence: String
  listType: String
  doi:String
  authority:String
  region:String
  wkt:String
  isAuthoritative:Boolean
  isPrivate: Boolean
  isInvasive: Boolean
  isThreatened: Boolean
  isBIE: Boolean
  isSDS: Boolean
  dateCreated: String
  lastUpdated: String
  lastUploaded: String
  lastUpdatedBy: String
  owner: String
  editors: [String]
  tags:[String]
}

type SpeciesListPage {
  content: [SpeciesList]
  totalPages: Int
  currentPage: Int
  totalElements: Int
}

type SpeciesListItem {
  id: ID
  version: Int
  speciesListID: String
  scientificName: String
  taxonID: String
  vernacularName: String
  kingdom: String
  phylum: String
  classs: String
  order: String
  family: String
  genus: String
  properties: [KeyValue]
  classification: Classification
  dateCreated: String
  lastUpdated: String
  lastUpdatedBy: String
}

input InputSpeciesListItem {
  id: String
  speciesListID: String
  scientificName: String
  taxonID: String
  vernacularName: String
  kingdom: String
  phylum: String
  classs: String
  order: String
  family: String
  genus: String
  properties: [InputKeyValue]
}


type SpeciesListItemPage {
  content: [SpeciesListItem]
  totalPages: Int
  currentPage: Int
  totalElements: Int
}

type Classification {
  scientificName: String
  scientificNameAuthorship: String
  vernacularName: String
  taxonConceptID: String
  kingdom: String
  kingdomID: String
  phylum: String
  phylumID: String
  classs: String
  classID: String
  order: String
  orderID: String
  family: String
  familyID: String
  genus: String
  genusID: String
}

input Filter {
  key: String
  value: String
}

type KeyValue {
  key: String
  value: String
}

input InputKeyValue {
  key: String
  value: String
}

type Facet {
  key: String
  counts: [FacetCount]
}

type FacetCount {
  value: String
  count: Int
}